buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
        resources {
            srcDir 'src/api/resources'
        }
        compileClasspath += configurations.getByName("minecraft")
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
        compileClasspath += sourceSets.api.output
    }
}

configurations {
    contained {
        transitive = false
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.14.3-27.0.60'
    apiCompileOnly "com.intellij:annotations:+@jar"
    compile 'com.intellij:annotations:+@jar'
    compile "org.mariuszgromada.math:MathParser.org-mXparser:4.0.0"
}

version = '1.0'
group = 'com.ldtteam.structurize' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'structurize'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190718-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('runClient')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                structurize {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('runServer')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                structurize {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}


processResources {
    inputs.property "version", project.version
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier 'api'
}

javadoc {
    source += sourceSets.api.allSource
}

idea {
    module {
        inheritOutputDirs = true
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.api.output
    from sourceSets.main.output

    from(configurations.contained.files) {
        include '*'
        into 'META-INF/libraries'
    }

    manifest {
        attributes([
            'FMLAT': "structurize_at.cfg",
            'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": "structurize",
            "Specification-Vendor": "structurizesareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"structurizesareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    classifier = 'universal'
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task setupDecompWorkspace {
    afterEvaluate {
        println "Setup"
    }
}

task setupCIWorkspace {
    afterEvaluate {
        println "Setup"
    }
}
